import threading

from aiogram import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.types import FSInputFile, Message

from bot.botcontroller import BotController
from bot.control.interaction import find_and_click, to_main
from bot.game.game import run_game_bot
from bot.screen import get_screen_shot  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
from bot.settings import Settings, get_settings, reset_settings
from bot.telegram.state import notification_queue
from bot.utility import save_cv_image

router = Router()

_controller: BotController = None
_settings: Settings = None


def register_handlers(dp, allowed_user_id: int, controller: BotController):
    global _controller
    _controller = controller

    global _settings
    _settings = get_settings()

    dp.include_router(router)

    @router.message(CommandStart())
    async def cmd_start(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        if _controller.is_game_running():
            notification_queue.put_nowait("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            return
        reset_settings()
        _controller.start()
        threading.Thread(target=run_game_bot, args=(_controller,), daemon=True).start()
        await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    @router.message(Command("stop"))
    async def cmd_stop(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        if not _controller.is_game_running():
            notification_queue.put_nowait("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        _controller.stop()
        await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—É–∫ –¥–ª—è graceful shutdown

    @router.message(Command("to_main"))
    async def cmd_to_main(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        to_main()
        await message.answer("üîÑ –ü–µ—Ä–µ—à—ë–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    @router.message(Command("find_and_click"))
    async def cmd_find_and_click(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        parts = message.text.strip().split()

        if len(parts) != 2:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: /find_and_click <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
            )
            return
        result = find_and_click(parts[1])
        if result is not None:
            await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –∫–ª–∏–∫–Ω—É—Ç–æ: {parts[1]}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç: {parts[1]}")

    @router.message(Command("screenshot"))
    async def cmd_screenshot(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        try:
            _settings.invalidate_screeenshot_cache()
            screenshot = get_screen_shot(cache=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –∫—ç—à
            save_cv_image("tg_screenshot", screenshot)
            photo = FSInputFile("./bot/data/tg_screenshot.png")
            await message.answer_photo(photo=photo)
        except TelegramBadRequest:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @router.message(Command("last_screenshot"))
    async def cmd_last_screenshot(message: Message):
        if message.from_user.id != allowed_user_id:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        try:
            photo = FSInputFile("./bot/data/last_screenshot.png")
            await message.answer_photo(photo=photo)
        except TelegramBadRequest:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def exception_handler(exc: Exception):
    msg = f"üö® Game bot crashed:\n<pre>{str(exc)}</pre>"
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    notification_queue.put_nowait(msg)
